Appendix.

Scenario 1: Network sending RAs with constant lifetime.
Let's assume the network sends RAs every 600 seconds, the valid lifetime for the prefix is 10 000 secs.
t0: an RA arrives, contains a PIO with lifetime = 10 000. The client forms an address (valid lifetime = 10 000 secs) and sends a registration message with valid lifetime set to 10 000 secs. So the server knows that the client may be using that address until t0+10 000 secs. The client calculates AddrRegRefreshInterval = min(4hrs, 0.8*10 000) = 8 000 secs and sets NextAddrRegRefreshTime = t0 + 8000.
t0 + 600: The client's address has a livetime 10000 - 600 = 9400 secs. 
          an RA arrives, contains a PIO with lifetime = 10 000, so the lifetime is changed from 9400 to 10000. As 600 is > 1% of 9400, the client calculates a new AddrRegRefreshInterval = 8 000 secs. The refresh is scheduled for min(t0 + 600 + 8000, t0 + 8000) = t0 + 8000 (NextAddrRegRefreshTime).

t0 + 1200: The client's address has a livetime 10000 - 1200 = 8800 secs. An RA arrives, contains a PIO with lifetime = 10 000, so the lifetime is changed from 8800 to 10000. As 1200 is > 1% of 8800, the client calculates a new AddrRegRefreshInterval = 8 000 secs. The refresh is scheduled for min(t0 + 1200 + 8000,  t0 + 8000) = t0 + 8000 (NextAddrRegRefreshTime) (practically it means the refresh is still scheduled for the same time).

t0 + 1800: ....the same....

t0 + 7800: ....the same
t0 + 8000: Registration refresh message sent with the address lifetime set to 10000 - 200 = 9800 secs, so the server assumes the client may be using the address until t0 + 8000 + 9800 = t0 + 17800. (It should be noted that the client refereshes the registration *before* the valid lifetime expires.  NextAddrRegRefreshTime is calculated = min(4 hours, 80% of the address's current Valid Lifetime) = min(14400, 0.8*9800) = min(14400, 7840) = 7840 secs.  NextAddrRegRefreshTime is t0 + 8000 + 7840 = t0 + 15800.
t0 + 8400: The client's address has a livetime 9400 secs. An RA arrives, contains a PIO with lifetime = 10 000, so the lifetime is changed from 9400 to 10000. As 600 is > 1% of 9400, the client calculates a new AddrRegRefreshInterval = 8 000 secs. The refresh is scheduled for min(t0 + 8400 + 8000, t0 + 15800) = t0 + 15800.

t0 + 9000: similar to t0 + 1200 etc..



Scenario 2: Network Stopped Sending RAs with the given PIO.
Scenario 2.1
The network sends a single RA with the valid lifetime for the prefix set to 10 000 secs. No more RAs with that PIO arrives.

t0: RA arrives. The client forms an address with valid lifetime = 10 000 secs) and sends a registration message with valid lifetime set to 10 000 secs. The client calculates AddrRegRefreshInterval = min(4hrs, 0.8*10 000) = 8 000 secs and sets NextAddrRegRefreshTime = t0 + 8000.
....

t0 + 10 000 secs: The address valid lifetime reaches zero, so the address ecomes invalid on the device (that is also reflected in the server's logs as the last (the only) received registration message indicates that the address is invalidated at t0 + 10 000 secs.

Scenario 2.2
The network sends three RAs (one every 10 mins) for the given PIO but then stops advertizing the prefix.

t0: RA arrives. The client forms an address with valid lifetime = 10 000 secs) and sends a registration message with valid lifetime set to 10 000 secs. The client calculates AddrRegRefreshInterval = min(4hrs, 0.8*10 000) = 8 000 secs and sets NextAddrRegRefreshTime = t0 + 8000.
t0 + 600: The client's address has a livetime 10000 - 600 = 9400 secs.
          An RA arrives, contains a PIO with lifetime = 10 000, so the lifetime is changed from 9400 to 10000. As 600 is > 1% of 9400, the client calculates a new AddrRegRefreshInterval = 8 000 secs. The refresh is scheduled for min(t0 + 600 + 8000, t0 + 8000) = t0 + 8000 (NextAddrRegRefreshTime).

t0 + 1200: The client's address has a livetime 10000 - 1200 = 8800 secs. An RA arrives, contains a PIO with lifetime = 10 000, so the lifetime is changed from 8800 to 10000. As 1200 is > 1% of 8800, the client calculates a new AddrRegRefreshInterval = 8 000 secs. The refresh is scheduled for min(t0 + 1200 + 8000,  t0 + 8000) = t0 + 8000 (NextAddrRegRefreshTime) (practically it means the refresh is still scheduled for the same time).

t0 + 1800: ....the same....
...the network stops sending RAs with the PIO.

t0 + 8000: Registration refresh message sent with the address lifetime set to 10000 - 8000 + 1800  = 3800 secs, so the server assumes the client may be using the address until t0 + 8000 + 3800 = t0 + 11800. (It should be noted that the client refereshes the registration *before* the valid lifetime expires.  NextAddrRegRefreshTime is calculated = min(4 hours, 80% of the address's current Valid Lifetime) = min(14400, 0.8*3800) = min(14400, 3040) = 3040 secs.  NextAddrRegRefreshTime is t0 + 8000 + 3040 = t0 + 1140.

... as no RA come, no more refresh messages

t + 11800: the  address valid lifetime reaches zero, so the address ecomes invalid on the device. The server logs also indicate that the address is invalid from now on.

Scenario 3. Network sending RAs with constant lifetime but some RAs are lost.
Let's assume the network sends RAs every 600 seconds, the valid lifetime for the prefix is 10 000 secs.

t0: an RA arrives, contains a PIO with lifetime = 10 000. The client forms an address (valid lifetime = 10 000 secs) and sends a registration message with valid lifetime set to 10 000 secs. So the server knows that the client may be using that address until t0+10 000 secs. The client calculates AddrRegRefreshInterval = min(4hrs, 0.8*10 000) = 8 000 secs and sets NextAddrRegRefreshTime = t0 + 8000.
....multiple RAs are lost

t0 + 9000: an RA arrives with the valid lifetime for the PIO = 10 000. The address lifetime is changed from 1000 to 10 000. 
the client calculates a new AddrRegRefreshInterval = 8 000 secs. The refresh is scheduled for min(t0 + 9000 + 8000, t0 + 8000) = t0 + 8000 (NextAddrRegRefreshTime). As it's in the past (the current time is t0 + 9000), the registration message is sent immidiately with the lifetime set to 10 000. The client calculates AddrRegRefreshInterval = min(4hrs, 0.8*10 000) = 8 000 secs and sets NextAddrRegRefreshTime = t0 + 9000 + 8000 = t0 + 17 000.

Scenario 4. The PIO belongs to a prefix delegated via DHCPv6-PD.
The network receives a prefix via DHCPv6-PD with the valid lifetime = 10 000 secs. The network advertizes a PIO from that prefix using the same lifetime.

t0: an RA arrives, contains a PIO with lifetime = 10 000. The client forms an address (valid lifetime = 10 000 secs) and sends a registration message with valid lifetime set to 10 000 secs. So the server knows that the client may be using that address until t0+10 000 secs. The client calculates AddrRegRefreshInterval = min(4hrs, 0.8*10 000) = 8 000 secs and sets NextAddrRegRefreshTime = t0 + 8000.

t0 +  600: The client's address has a livetime 10000 - 600 = 9400 secs. 
          an RA arrives, contains a PIO with lifetime = 9400 secs. As the PIO is not changing the address valid lifetime, the client does nothing.

t0 + 1200: The client's address has a livetime 10000 - 1200 = 8800 secs. An RA arrives, contains a PIO with lifetime = 8800 secs. As the address lifetime is not updated by this RA, the client does nothing.

... at some point of time, the prefix delegation refreshes the lifetime.
t0 +  8800: The client's address has a livetime 1200. An RA arrives, contains a PIO with lifetime = 10 000. As this RA upadtes the address lifetime from 1200 to 10 000 (more that 1%), the client calculates a new AddrRegRefreshInterval = 8 000 secs and schedules a refresh for min(t0 + 8800 + 8000, t0 + 8000) = t0 + 8000.
As this is in the past, a refresh is sent immidiately with lifetime = 10000.
The client calcluates AddrRegRefreshInterval = min(4hrs, 0.8*10 000) = 8 000 secs and sets  NextAddrRegRefreshTime = t0 + 8800 + 8000 = t0 + 16800 secs.

t0 + 9400: the same as t0 + 600.
etc.
















